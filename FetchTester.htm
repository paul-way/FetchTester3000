<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>Fetch Tester</title>
  <meta name="description" content="Fetch Tester 3000 allows you to write fetch statements and get formatted results, a JCL ready version, and much more">
  <meta name="author" content="Paul Way">

  <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.1.0/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://ajax.aspnetcdn.com/ajax/bootstrap/3.1.0/css/bootstrap-theme.css">
  

	<style type="text/css">
		#fetchToExecute,
		#jclOutput,
		#jsonOutput {
			width: 100%;
			height: 600px;
			border: solid 1px #ccc;
		}

		#jsonOutput {
			overflow-y: scroll;
		}

		.tabbable {
			margin: 4px;
		}

		.tab-content {
			border-left: solid 1px #CCC;
			border-bottom: solid 1px #CCC;
			border-right: solid 1px #CCC;
			padding: 10px;
		}

		.title-header {
			margin: 4px;
			padding-bottom: 4px;
			border-bottom: solid 1px #CCC;
			height: 52px;
		}

		.title-icon {
			background-image: url(fetchIcon.png);
			width: 48px;
			display: block;
			height: 48px;
			float: left;
		}

		.title-main {
			font-size: 22px;
			color: #578B19;
			padding: 8px;
			display: inline-block;
		}

		.version {
			font-size: 10px;
			float: right;
			color: #333;
			padding: 4px;
		}

		#jsonOutput pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }
		#jsonOutput .string { color: green; }
		#jsonOutput .number { color: darkorange; }
		#jsonOutput .boolean { color: blue; }
		#jsonOutput .null { color: magenta; }
		#jsonOutput .key { color: #777; }
		#jsonOutput .guid { color: #369; }
	</style>

	<!-- Context -->
    <script type="text/javascript" src="../../ClientGlobalContext.js.aspx"></script>

	<script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-2.1.0.min.js"></script>
	<script src="https://ajax.aspnetcdn.com/ajax/bootstrap/3.1.0/bootstrap.min.js"></script>
	<script src="vkbeautify.0.99.00.beta.js"></script>
	<script src="jcl.js"></script>

	<script type="text/javascript">

		var formatter = {};

		formatter.formatXMLForJCL = function (code) {
			return code.replace(/\"/g, '\'');
		};
	
		formatter.syntaxHighlight = function (json) {
		    if (typeof json != 'string') {
		         json = JSON.stringify(json, undefined, 2);
		    }
		    json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
		    return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
		        var cls = 'number';
		        if (/[a-fA-F0-9]{8}-([a-fA-F0-9]{4}-){3}[a-fA-F0-9]{12}/.test(match)) {
		        	cls = 'guid';
		        } else if (/^"/.test(match)) {
		            if (/:$/.test(match)) {
		                cls = 'key';
		            } else {
		                cls = 'string';
		            }
		        } else if (/true|false/.test(match)) {
		            cls = 'boolean';
		        } else if (/null/.test(match)) {
		            cls = 'null';
		        }
		        
		        return '<span class="' + cls + '">' + match + '</span>';
		    });
		};


		var processResults = function (data) {
			$('#jsonOutput pre').html(formatter.syntaxHighlight(JSON.stringify(data, undefined, 4)));
			$('.json-data').click();
		};

		$(function() {
			$('#btnFetch').on('click', function () {
				var fetch = vkbeautify.xml($('#fetchToExecute').val().trim()),
					jclLines = formatter.formatXMLForJCL(fetch),
					i = 0, 
					lines = jclLines.split('\n'),
					jclCode = "var fetch = '' + \n"; 

				for(i = 0; i < lines.length - 1; i++) { 
					jclCode += "    '" + lines[i] + "' +\n"; 
				}

				jclCode += "    '" + lines[lines.length-1] + "';";

				$('#jclOutput').val(jclCode);
				$('.jcl-tab').click();


				if (typeof Xrm === 'object') {
					JCL.fetch(fetch, function (data) {
						processResults(data);
					});
				} else {
					processResults(JSON.parse(fake));
				}

			});

			$('#btnBeautify').on('click', function () {
				var fetch = $('#fetchToExecute').val().trim();
				$('#fetchToExecute').val(vkbeautify.xml(fetch));
			});
		});

		var fake = "[]";

	</script>
</head>

<body>
	<div class="title-header">
		<span class="title-icon"></span>
		<span class="title-main">Fetch Tester 3000</span>
		<span class="version">Version 0.1 Beta</span>
	</div>

	<div class="tabbable"> <!-- Only required for left/right tabs -->
  		<ul class="nav nav-tabs">
			<li class="active"><a href="#tab1" data-toggle="tab">Fetch XML</a></li>
			<li><a href="#tab2" class="jcl-tab" data-toggle="tab">JCL Query</a></li>
			<li><a href="#tab3" class="json-data" data-toggle="tab">JSON Output</a></li>
		</ul>
		<div class="tab-content">
			<div class="tab-pane active" id="tab1">
				<textarea id="fetchToExecute">
<fetch mapping='logical' aggregate='true'>
    <entity name='account'>
        <attribute name='name' aggregate='count' alias='account_count' />
        <filter type='and'>
            <condition attribute='statecode' operator='eq' value='0' />
        </filter>
    </entity>
</fetch>
				</textarea>

				<button id="btnFetch" class="btn">Execute Fetch</button>
				<button id="btnBeautify" class="btn">Beautify</button>
			</div>
			<div class="tab-pane" id="tab2">
				<textarea id="jclOutput">
				</textarea>
			</div>
			<div class="tab-pane" id="tab3">
				<div id="jsonOutput">
					<pre>

					</pre>
				</div>
			</div>			
		</div>
	</div>

  
</body>
</html>